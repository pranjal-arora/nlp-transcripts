# -*- coding: utf-8 -*-
"""PranjalArora_102003402_ NLP in Python 6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ghqBJ-CVpE8FHWrNrD2G5_k1HFl31cuB

# Text Generation

## Introduction

Markov chains can be used for very basic text generation. Think about every word in a corpus as a state. We can make a simple assumption that the next word is only dependent on the previous word - which is the basic assumption of a Markov chain.

Markov chains don't generate text as well as deep learning, but it's a good (and fun!) start.
"""

# markov chain - stochastic model describing a sequence of possible events in which the probability
#  of each event depends only on the state attained in the previous event

"""## Select Text to Imitate

In this notebook, we're specifically going to generate text in the style of Ali Wong, so as a first step, let's extract the text from her comedy routine.
"""

!pip install --upgrade --user pandas==1.3

# Read in the corpus, including punctuation!
import pandas as pd
print(pd.__version__)
import pickle

data = pd.read_pickle('/content/sample_data/corpus.pkl')
data

# Extract only Ali Wong's text
ali_text = data.transcript.loc['ali']
ali_text[:200]

"""## Build a Markov Chain Function

We are going to build a simple Markov chain function that creates a dictionary:
* The keys should be all of the words in the corpus
* The values should be a list of the words that follow the keys
"""

from collections import defaultdict

def markov_chain(text):
    '''The input is a string of text and the output will be a dictionary with each word as
       a key and each value as the list of words that come after the key in the text.'''
    
    # Tokenize the text by word, though including punctuation
    words = text.split(' ')
    
    # Initialize a default dictionary to hold all of the words and next words
    m_dict = defaultdict(list)
    
    # Create a zipped list of all of the word pairs and put them in word: list of next words format
    for current_word, next_word in zip(words[0:-1], words[1:]):
        m_dict[current_word].append(next_word)

    # Convert the default dict back into a dictionary
    m_dict = dict(m_dict)
    return m_dict

# Create the dictionary for Ali's routine, take a look at it
ali_dict = markov_chain(ali_text)
ali_dict

"""## Create a Text Generator

We're going to create a function that generates sentences. It will take two things as inputs:
* The dictionary you just created
* The number of words you want generated

Here are some examples of generated sentences:

>'Shape right turn– I also takes so that she’s got women all know that snail-trail.'

>'Optimum level of early retirement, and be sure all the following Tuesday… because it’s too.'
"""

import random

def generate_sentence(chain, count=15):
    '''Input a dictionary in the format of key = current word, value = list of next words
       along with the number of words you would like to see in your generated sentence.'''

    # Capitalize the first word
    word1 = random.choice(list(chain.keys()))
    sentence = word1.capitalize()

    # Generate the second word from the value list. Set the new word as the first word. Repeat.
    for i in range(count-1):
        word2 = random.choice(chain[word1])
        word1 = word2
        sentence += ' ' + word2

    # End it with a period
    sentence += '.'
    return(sentence)

generate_sentence(ali_dict)

"""### Assignment:
1. Generate sentence for other comedians also.

"""

comedians = ['louis', 'dave', 'ricky', 'bo', 'bill', 'jim', 'john', 'hasan', 'ali', 'anthony', 'mike', 'joe']

text=[]
for i in range(0,len(comedians)):
    str1=comedians[i]
    str2="text"
    str=str1+str2
    print(str)
    text.append(str)

# Extract text of all comedians
dict1={}
for i in range(0,len(comedians)):
    dict1[text[i]]=data.transcript.loc[comedians[i]]

dict1

diction=[]
for i in range(0,len(comedians)):
    strn="dict"
    strn1=comedians[i]
    str3=strn1+strn
    diction.append(str3)

diction

#dictionary for all comedians
dict2={}
for i in range(0,len(comedians)):
    dict2[diction[i]] = markov_chain(dict1[text[i]])

sentence=[]
for i in range(0,len(comedians)):
    sentence.append(generate_sentence(dict2[diction[i]]))

sentence



"""2. Try making the generate_sentence function better. Maybe allow it to end with a random punctuation mark or end whenever it gets to a word that already ends with a punctuation mark."""

import string

def generate_sentence(chain, count=15):
    '''Input a dictionary in the format of key = current word, value = list of next words
       along with the number of words you would like to see in your generated sentence.'''
    
    # Capitalize the first word
    word1 = random.choice(list(chain.keys()))
    sentence = word1.capitalize()
    
    # Generate the second word from the value list. Set the new word as the first word. Repeat.
    for i in range(count-1):
        word2 = random.choice(chain[word1])
        sentence += ' ' + word2
        # End sentence if we reach a word that already ends with punctuation
        if word2[-1] in string.punctuation:
            break
        word1 = word2
    
    # End it with a random punctuation mark if there isn't one already
    if sentence[-1] not in string.punctuation:
        sentence += random.choice(string.punctuation)
    
    return sentence

sentenceN=[]

for i in range(0,len(comedians)):
    sentenceN.append(generate_sentence(dict2[diction[i]]))

sentenceN=[]

sentenceN[3]

# sentence 4 makes the most sense as it is using more nouns and adverbs and uses more grammer.

# The updated function checks if the randomly selected word ends with a punctuation mark and ends the sentence if it does. Additionally, if the sentence doesn't end with punctuation,
# it adds a random punctuation mark to the end. This will help to make the 
#generated sentences look more natural and varied.